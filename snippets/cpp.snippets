extends c

# header
snippet header
	#ifndef ${1:`vim_snippets#Filename('$1', 'name')`}_HPP
	#define $1_HPP
	#endif  // $1_HPP

## STL Collections
# std::array
snippet array
	std::array<${1:T}, ${2:N}> ${3};
# std::vector
snippet vector
	std::vector<${1:T}> ${2};
# std::deque
snippet deque
	std::deque<${1:T}> ${2};
# std::forward_list
snippet flist
	std::forward_list<${1:T}> ${2};
# std::list
snippet list
	std::list<${1:T}> ${2};
# std::set
snippet set
	std::set<${1:T}> ${2};
# std::map
snippet map
	std::map<${1:Key}, ${2:T}> ${3};
# std::multiset
snippet mset
	std::multiset<${1:T}> ${2};
# std::multimap
snippet mmap
	std::multimap<${1:Key}, ${2:T}> ${3};
# std::unordered_set
snippet uset
	std::unordered_set<${1:T}> ${2};
# std::unordered_map
snippet umap
	std::unordered_map<${1:Key}, ${2:T}> ${3};
# std::unordered_multiset
snippet umset
	std::unordered_multiset<${1:T}> ${2};
# std::unordered_multimap
snippet ummap
	std::unordered_multimap<${1:Key}, ${2:T}> ${3};
# std::stack
snippet stack
	std::stack<${1:T}> ${2};
# std::queue
snippet queue
	std::queue<${1:T}> ${2};
# std::priority_queue
snippet pqueue
	std::priority_queue<${1:T}> ${2};
##
## Access Modifiers
# private
snippet pri
	private
# protected
snippet pro
	protected
# public
snippet pub
	public
# friend
snippet fr
	friend
# mutable
snippet mu
	mutable
##
## Class
# class
snippet cl
	class ${1:`vim_snippets#Filename('$1', 'name')`} {
	public:
		$1(${2});
		~$1();

	private:
	};
# member function implementation
snippet mfun
	${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${0}
	}
# namespace
snippet ns
	namespace ${1:`vim_snippets#Filename('', 'my')`} {
		${0}
	} /* namespace $1 */
##
## Input/Output
# std::cout
snippet cout
	std::cout << ${1} << std::endl;
snippet cout1
	std::cout << "${1}" << std::endl;
snippet cout2
	std::cout << ${1} << " ";
snippet cout3
	std::cout << "$1: " << ${1:x} << std::endl;
snippet coutvec
	for (auto& ${1:i} : ${2:container}) { std::cout << $1 << " "; } std::cout << std::endl;
snippet endl
	std::cout << std::endl;

# std::cin
snippet cin
	std::cin >> ${1};
snippet cin1
	std::cin.get();


# ostream operator<<
snippet ostream<<
	ostream& operator<<(ostream& sm, ${1:vector}<${2:int}>& $1){
		for (auto i : $1) {
			sm << i << " ";
		}
		sm << endl;
		return sm;
	}

##
## Iteration
# for i
snippet fori
	for (unsigned int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	}

# foreach
snippet fore
	for (${1:auto} ${2:i} : ${3:container}) {
	}
# iterator
snippet iter
	for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}

# auto iterator
snippet itera
	for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
		${3:std::cout << *$1 << std::endl;}
	}
##
## Lambdas
# lamda (one line)
snippet ld
	[${1}](${2}){${3}}
# lambda (multi-line)
snippet lld
	[${1}](${2}){
		${3}
	}

######################################
#	ROS - snippets
######################################

# Subscriber
snippet rossub
	ros::Subscriber ${1:sub} = ${2:n}.subscribe("${3}", 1000, ${4:Callback});

	// Subscriber callback for node: $2
	void $4(const ${5}& msg) {
	}

# Publisher
snippet rospub
	ros::Publisher ${1:pub} = ${2:n}.advertise<${4:std_msgs::String}>("${3}", 1000);
	$4 msg;
	$1.publish(msg);

# Init
snippet rosinit
	ros::init(argc, argv, "${1:node_name}");
	ros::NodeHandle ${2:n};

# Service server
snippet rossrv
	ros::ServiceServer ${1:service} = ${2:n}.advertiseService("${3}", ${4:Callback});

	// Service callback for node: $2
	bool $4(${5:pkg::srv}::Request& req, $5::Response& res) {
		return true;
	}
